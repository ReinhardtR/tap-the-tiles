{"version":3,"sources":["src/components/gameBoard.jsx","src/containers/game.jsx","App.js"],"names":["GameBoard","onHit","onMiss","rows","cols","useState","row","col","tiles","setTiles","isClickableTile","tile","spawnNewTile","index","findIndex","newTiles","posTaken","Math","floor","random","length","every","randomTilePos","View","style","styles","container","map","key","TouchableOpacity","clickable","toString","onPress","StyleSheet","create","flexDirection","alignItems","justifyContent","backgroundColor","height","width","margin","Game","isDead","setIsDead","score","setScore","Text","console","log","fontSize","color","App","StatusBar","maxWidth"],"mappings":"ugCAGe,SAASA,EAAT,GAAuC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACnCC,EAAO,CAAC,EAAG,EAAG,EAAG,GACjBC,EAAO,CAAC,EAAG,EAAG,EAAG,GAF4B,EAIzBC,mBAAS,CACjC,CAAEC,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,KAPkC,WAI5CC,EAJ4C,KAIrCC,EAJqC,KAsB7CC,EAAkB,SAACJ,EAAKC,GAC5B,cAAmBC,KAAnB,aAA0B,CAAC,IAAhBG,EAAe,QACxB,GAAIA,EAAKL,MAAQA,GAAOK,EAAKJ,MAAQA,EAAK,OAAO,EAEnD,OAAO,GAGHK,EAAe,SAACN,EAAKC,GACzB,IAAMM,EAAQL,EAAMM,WAClB,SAACH,GAAD,OAAUA,EAAKL,MAAQA,GAAOK,EAAKJ,MAAQA,KAEvCQ,EAAWP,EACjBO,EAASF,GAxBW,WAEpB,IAFyD,IACrDG,GAAW,EACRA,GAAU,CACf,IAAIV,EAAMW,KAAKC,MAAMD,KAAKE,SAAWhB,EAAKiB,QACtCb,EAAMU,KAAKC,MAAMD,KAAKE,SAAWf,EAAKgB,QACtCZ,EAAMa,OAAM,SAACV,GAAD,OAAUA,EAAKL,MAAQA,GAAOK,EAAKJ,MAAQA,OACzDS,GAAW,GAGf,MAAO,CAAEV,MAAKC,OAeIe,CAAchB,EAAKC,GACrCE,EAASM,IAGX,OACE,kBAACQ,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WACjBvB,EAAKwB,KAAI,SAACrB,GAAD,OACR,kBAACiB,EAAA,EAAD,CAAMC,MAAOC,EAAOnB,IAAKsB,IAAKtB,GAC3BF,EAAKuB,KAAI,SAACpB,GAAD,OACR,kBAACsB,EAAA,EAAD,CACEL,MAAO,CACLC,EAAOd,KACPD,EAAgBJ,EAAKC,IAAQkB,EAAOK,WAEtCF,IAAKtB,EAAIyB,WAAaxB,EAAIwB,WAC1BC,QAAS,WACHtB,EAAgBJ,EAAKC,IACvBN,EAAMK,EAAKC,GACXK,EAAaN,EAAKC,IAElBL,eAWlB,IAAMuB,EAASQ,IAAWC,OAAO,CAC/BR,UAAW,CACTS,cAAe,SACfC,WAAY,SACZC,eAAgB,UAElB/B,IAAK,CACH6B,cAAe,MACfC,WAAY,SACZC,eAAgB,UAElB1B,KAAM,CACJ2B,gBAAiB,QACjBC,OAAQ,QACRC,MAAO,QACPC,OAAQ,OAEVX,UAAW,CACTQ,gBAAiB,aClFN,SAASI,IAAQ,IAAD,EACDrC,oBAAS,GADR,WACtBsC,EADsB,KACdC,EADc,OAEHvC,mBAAS,GAFN,WAEtBwC,EAFsB,KAEfC,EAFe,KAc7B,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMvB,MAAOC,EAAOoB,OAAQA,IAC1BF,GACA,oCACE,kBAAC3C,EAAD,CAAWC,MAAO,kBAdxB+C,QAAQC,IAAI,YACZH,EAASD,EAAQ,IAasB3C,OAAQ,kBAT/C8C,QAAQC,IAAI,aACZL,GAAU,QAed,IAAMnB,EAASQ,IAAWC,OAAO,CAC/BW,MAAO,CACLK,SAAU,GACVC,MAAO,WC5BI,SAASC,IACtB,OACE,kBAAC7B,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,kBAACgB,EAAD,MACA,kBAACW,EAAA,EAAD,CAAW7B,MAAM,UAKvB,IAAMC,EAASQ,IAAWC,OAAO,CAC/BR,UAAW,CACTe,OAAQ,OACRH,gBAAiB,QACjBF,WAAY,SACZC,eAAgB,SAChBE,OAAQ,QACRC,MAAO,QACPc,SAAU,Y","file":"static/js/app.8dd7cddc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, TouchableOpacity, View } from \"react-native\";\r\n\r\nexport default function GameBoard({ onHit, onMiss }) {\r\n  const rows = [0, 1, 2, 3];\r\n  const cols = [0, 1, 2, 3];\r\n\r\n  const [tiles, setTiles] = useState([\r\n    { row: 1, col: 1 },\r\n    { row: 2, col: 2 },\r\n    { row: 3, col: 3 },\r\n  ]);\r\n\r\n  const randomTilePos = (prevRow = null, prevCol = null) => {\r\n    var posTaken = true;\r\n    while (posTaken) {\r\n      var row = Math.floor(Math.random() * rows.length);\r\n      var col = Math.floor(Math.random() * cols.length);\r\n      if (tiles.every((tile) => tile.row !== row || tile.col !== col)) {\r\n        posTaken = false;\r\n      }\r\n    }\r\n    return { row, col };\r\n  };\r\n\r\n  const isClickableTile = (row, col) => {\r\n    for (const tile of tiles) {\r\n      if (tile.row === row && tile.col === col) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const spawnNewTile = (row, col) => {\r\n    const index = tiles.findIndex(\r\n      (tile) => tile.row === row && tile.col === col\r\n    );\r\n    const newTiles = tiles;\r\n    newTiles[index] = randomTilePos(row, col);\r\n    setTiles(newTiles);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {rows.map((row) => (\r\n        <View style={styles.row} key={row}>\r\n          {cols.map((col) => (\r\n            <TouchableOpacity\r\n              style={[\r\n                styles.tile,\r\n                isClickableTile(row, col) && styles.clickable,\r\n              ]}\r\n              key={row.toString() + col.toString()}\r\n              onPress={() => {\r\n                if (isClickableTile(row, col)) {\r\n                  onHit(row, col);\r\n                  spawnNewTile(row, col);\r\n                } else {\r\n                  onMiss();\r\n                }\r\n              }}\r\n            />\r\n          ))}\r\n        </View>\r\n      ))}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  row: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  tile: {\r\n    backgroundColor: \"white\",\r\n    height: \"100px\",\r\n    width: \"100px\",\r\n    margin: \"1px\",\r\n  },\r\n  clickable: {\r\n    backgroundColor: \"skyblue\",\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { StyleSheet, Text } from \"react-native\";\r\nimport GameBoard from \"../components/gameBoard\";\r\n\r\nexport default function Game() {\r\n  const [isDead, setIsDead] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const onHit = () => {\r\n    console.log(\"Hit\");\r\n    setScore(score + 1);\r\n  };\r\n\r\n  const onMiss = () => {\r\n    console.log(\"Miss\");\r\n    setIsDead(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text style={styles.score}>{score}</Text>\r\n      {!isDead && (\r\n        <>\r\n          <GameBoard onHit={() => onHit()} onMiss={() => onMiss()} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  score: {\r\n    fontSize: 50,\r\n    color: \"white\",\r\n  },\r\n});\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport Game from \"./src/containers/game\";\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Game />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: \"auto\",\n    backgroundColor: \"black\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\",\n    width: \"100vw\",\n    maxWidth: \"480px\",\n  },\n});\n"],"sourceRoot":""}